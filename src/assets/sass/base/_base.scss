// -----------------------------------------------------------------------------
// This file contains very basic styles.
// -----------------------------------------------------------------------------

//
// Set up a decent box model on the root element
//

:root {
  cursor: default;
  font-smooth: always;
  -webkit-font-smoothing: auto;
  -moz-font-smoothing: auto;
  vertical-align: top;
}

html {
  font-size: 88%;

  @include respond-to('phone-tall') {
    font-size: 100%;
  }

  // Scales by 1px for every 100px from 600px to 1000px
  @include respond-to('tablet') {
    font-size: calc(75% + 5 * (100vw - 768px) / 768);
  }

  // Scales by 0.5px for every 100px from 1000px to 2000px
  @include respond-to('desktop') {
    font-size: calc(88% + 5 * (100vw - 1024px) / 1024);
  }

  @include respond-to('hd') {
    font-size: calc(88% + 5 * (100vw - 1400px) / 1400);
  }
}

html,
body {
  // background-color: $base-grey;
  // @include brand-gradient($grain: 'grain-bright.jpg', $color: $white);
  // background: image('grain-bright.jpg'); background-size: 300px;
  background-color: $base-color;
  box-sizing: border-box;
  width: 100vw;
  min-height: 100vh;
  overflow-x: hidden;

  // &.device--mobile { overflow-x: hidden; }
  // &.page--noScroll { overflow: hidden; }
}

// Prevent transitions before elements load;

body {
  padding-bottom: 5rem;

  &.preload {
    img { opacity: 0; }
    * {
      @include transition(none !important);
    }
  }

  // TODO Development aid
  &::before {
    opacity: .64;
    display: none;
    content: '';
    position: fixed;
    background: image('grid.png') top center;
    background-size: 100% auto;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
}


// Make all elements from the DOM inherit from the parent box-sizing
// Since `*` has a specificity of 0, it does not override the `html` value
// making all elements inheriting from the root box-sizing value
// See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/

*,
*::before,
*::after {
  box-sizing: inherit;
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  text-decoration: inherit;
  vertical-align: inherit;

  // iOS active touch highlight modify
  &,
  &:link {
    -webkit-tap-highlight-color: rgba($bright, .02);
  }
}

// Fix images width
img:not(.free):not(.image--cover) {
  max-width: 100%;
}

// Reset unordered list
ul {
  list-style: none;
  margin: 0;
  padding: 0;

  li {
    margin: 0;
    padding: 0;
  }
}

// Basic styles for links
a {
  color: $comp-color;
  text-decoration: none;
  transition: $transition;

  // cursor: pointer;

  @include on-event {
    color: $brand-color-darker;

    p & {
      text-decoration: underline;
    }
  }

  &.link--spare {
    display: block;
    padding: 1rem;
    color: inherit;
    opacity: .64;
    font-weight: $regular;

    @include on-event {
      opacity: 1;
    }
  }
}


// General layout
section {
  &.layout--fullscreen {
    min-height: 100vh;
  }
}

// Grid system
// TODO Finish grid system
.grid__container {
  @include display(flex);
  @include flex-flow(row wrap);
  position: relative;

  > .grid__item {
    @include flex(0 1 auto);

    &.grid__item--1of8 {
      width: (100% / 8);
    }

    &.grid__item--1of7 {
      width: (100% / 7);
    }

    &.grid__item--1of6 {
      width: (100% / 6);
    }

    &.grid__item--1of5 {
      width: (100% / 5);
    }

    &.grid__item--1of4 {
      width: (100% / 4);
    }

    &.grid__item--1of3 {
      width: (100% / 3);
    }

    &.grid__item--1of2 {
      width: (100% / 2);
    }

    &.grid__item--1of1 {
      width: 100%;
    }

    // TODO Grid System - Revise breakpoints

  }

  &.grid--gutter {
    $gutter: 1rem;

    section & {
      margin: -($gutter / 2);
      margin-top: $gutter / 2;
    }

    > .grid__item {
      padding: $gutter / 2;
    }
  }
}

// Elevations and layout
.layout--base {
  margin: 0;
  padding: .64rem;
  box-shadow: none;
  transition: $transition;
  position: relative;

  &.force-top {
    padding-top: 0 !important;
  }

  &.paint--brand {
    background-color: $brand-color;
    color: dynamic-color($brand-color);
  }

  &.paint--comp {
    background-color: $comp-color;
    color: dynamic-color($comp-color);
  }

  &.paint--accent {
    background-color: $accent-color;
    color: dynamic-color($accent-color);
  }

  &.inverse {
    color: $white;
  }

  &.group,
  .layout__group > & {
    margin-bottom: 0;
    margin-top: 0;

    &:first-child {
      margin-top: 1rem;
    }

    &:last-child {
      margin-bottom: 1rem;
    }
  }

  & & {
    margin-left: 0;
    margin-right: 0;

    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }

  &:first-of-type {
    margin-top: 0;
  }

  &:last-of-type {
    margin-bottom: 0;
  }
}

.layout__group {
  position: relative;

  & + & {
    margin-top: 1rem;
  }
}

.layout--card {
  margin: .64rem;
  padding: .64rem;
  background-color: $white;
  border: 1px solid $frame-color;
  transition: $transition;
  z-index: 1;
  position: relative;

  &.paint--brand {
    background-color: $brand-color;
    color: dynamic-color($brand-color);
    border-color: darken($brand-color, 16%);
  }

  &.paint--comp {
    background-color: $comp-color;
    color: dynamic-color($comp-color);
    border-color: darken($comp-color, 16%);
  }

  &.paint--accent {
    background-color: $accent-color;
    color: dynamic-color($accent-color);
    border-color: darken($accent-color, 16%);
  }

  &.group,
  .layout__group & {
    margin-top: -1px;
    margin-bottom: 0;

    &:first-child {
      margin-top: 1rem;
    }
  }

  .layout--base & {
    margin-left: 0;
    margin-right: 0;

    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}

@for $n from 1 through length($shadows) {
  .layout--card-#{$n} {
    margin: .64rem;
    padding: .64rem;
    border-color: $white;
    background-color: $white;
    box-shadow: nth($shadows, $n);
    transition: $transition;
    z-index: $n;
    position: relative;

    &.group,
    .layout__group & {
      margin-bottom: 0;
      margin-top: 0;

      &:first-child {
        margin-top: 1rem;
      }

      &:last-child {
        margin-bottom: 1rem;
      }
    }

    .layout--base & {
      margin-left: 0;
      margin-right: 0;

      &:first-child {
        margin-top: 0;
      }

      &:last-child {
        margin-bottom: 0;
      }
    }

    &.paint--brand {
      background-color: tint($brand-color, ($n - 1) * 3%);
      color: $bright;
      box-shadow: nth($shadows-heavy, $n);
    }

    &.paint--comp {
      background-color: tint($comp-color, ($n - 1) * 3%);
      color: $bright;
      box-shadow: nth($shadows, $n);
    }

    &.paint--accent {
      background-color: tint($accent-color, ($n - 1) * 3%);
      color: $bright;
      box-shadow: nth($shadows-heavy, $n);
    }

    &.transparent {
      background-color: rgba(255, 255, 255, $n * .01);
    }

    &.transparent--inverse {
      background-color: rgba(255, 255, 255, ($n - 1) * .02);
      color: $bright;
    }
  }
}

.layout__header {
  padding-bottom: 12rem;
  text-align: center;
  overflow: hidden;

  &:not(.cover__container) {
    background-color: $brand-color;
    color: $white;
  }

  .template--profile--public & {
    height: 65vmax;
  }
}

.layout__header--content-page {
  padding: 1rem;
  padding-top: 7rem !important;
  margin-bottom: 1rem;

  &.paint--brand { color: $white; }
}

.layout__button-bar {
  padding-top: 1rem;

  &.space--m {
    padding-top: $ico-size-m;
  }

  &.space--l {
    padding-top: $ico-size-l;
  }

  &.space--xl {
    padding-top: $ico-size-xl;
  }

  &.button-bar--divided {
    .grid__item + .grid__item {
      border-left: 1px solid rgba(dynamic-color($brand-color), .1);
    }
  }
}

// Brand gradient and backgrounds
.paint--gradient {
  @include brand-gradient;
  color: dynamic-color($brand-color);
}

@for $n from 1 through 17 {
  .paint--back-#{$n} {
    @include brand-gradient($image: 'backs/ph#{$n}.jpg');
    color: $white;

    @if $n == 7 {
      // I know this pic... focus is on the right
      background-position: 50% 50%, 50% 50%, right center;
    }
  }
}

// Content flow
.flow--right {
  text-align: right;
}

.flow--center {
  text-align: center;
}

// Ripples
a:not(.no-ripple),
.ripple {
  @include backface-visibility(hidden);
  @include transform(translate3d(0, 0, 1px));

  display: inline-block;
  position: relative;
  overflow: hidden !important;

  // @include perspective(1000px);
}

.ink {
  @include transform(scale(0) translate3d(0, 0, 0));

  display: block;
  position: absolute;
  background-color: rgba($black, .11);
  border-radius: 100%;

  // & ~ & {display: none;}

  .paint--brand &,
  .paint--comp &,
  .paint--accent &,
  .cover__container & {
    background-color: rgba($white, .36);
  }
}

.animate {
  @include animation(ripple .36s ease-out);
}

@include keyframes(ripple) {
  100% {
    @include transform(scale(2.5) translate3d(0, 0, 0));
    opacity: 0;
  }
}
