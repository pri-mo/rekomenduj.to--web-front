// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($mobile-safe: true, $scope: '.device--no-touch') {
  $s: unquote($scope);

  @if $mobile-safe {
    #{$s} &:hover,
    #{$s} &:active {
      // &:focus {
        @content;
      }
    } @else {
      &:hover,
      &:active {
      // &:focus {
        @content;
      }
    }
  }

/// Grid functions
@function grid-space($width, $no-gutter: false) {
  @if ($no-gutter) {
    @return map-get($grid--no-gutter, $width);
  } @else {
    @return map-get($grid, $width);
  }
}

@mixin grid--cell-width($grid-cells, $no-gutter:false) {
  @if ($no-gutter) {
    width: grid-space($grid-cells, $no-gutter);
  } @else {
    width: grid-space($grid-cells, $no-gutter);
    margin-right: $gutter-size;

    &:last-child {
      margin-right: 0;
    }
  }
}

@mixin grid--cell-push($grid-cells, $no-gutter:false) {
  @if ($grid-cells == 0) {
    left: 0;
  } @else {
    left: grid-space($grid-cells, $no-gutter);
  }
}

@mixin grid--cell-pull($grid-cells, $no-gutter:false) {
  @if ($grid-cells == 0) {
    margin-left: 0;
  } @else {
    margin-left: (grid-space($grid-cells, $no-gutter) * -1);
  }
}


/// Mixes a color with yellow.
///
/// @param {Color} $color
/// @param {Number (Percentage)} $percent
///   The amount of yellow to be mixed in.
/// @return {Color}

@function warm($color, $percent) {
  $scaled: scale-color($color, $red: $percent, $blue: -$percent);
  @return scale-color($scaled, $lightness: -($percent * .25));
}


/// Mixes a color with blue.
///
/// @param {Color} $color
/// @param {Number (Percentage)} $percent
///   The amount of blue to be mixed in.
/// @return {Color}

@function cool($color, $percent) {
  $scaled: scale-color($color, $blue: $percent, $red: -$percent);
  @return scale-color($scaled, $lightness: -( $percent * .25 ) );
}


/// Make text color respond to color lightness
/// @author Sebastian EkstrÃ¶m
/// @param {Color} $color
@function dynamic-color($color, $text: $color) {
  @if (lightness($color) > 40) {
    // @return darken($text, 75%); // Lighter backgorund, return dark color
    @return $text-color; // Lighter backgorund, return dark color
  } @else {
    // @return lighten($text, 75%); // Darker background, return light color
    @return $white; // Darker background, return light color
  }
}


/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}



/// Responsive breakpoint manager
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  // Get the query map for $breakpoints map
  $queries: map-get($breakpoints, $breakpoint);

  // If there is no query called $breakpoint in map, throw an error
  @if not $queries {
    @error "No value could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }

  // Include the media mixin with $queries
  @include media($queries) {
    @content;
  }
}


/// Media query merger
/// @author Hugo Giraudel
/// Create a single media condition out of a map of queries
/// @param {Map} $queries - Map of media queries
@mixin media($queries) {
  @if length($queries) == 0 {
    @content;
  } @else {
    $first-key: nth(map-keys($queries), 1);

    @media ($first-key: map-get($queries, $first-key)) {
      $queries: map-remove($queries, $first-key);

      @include media($queries) {
        @content;
      }
    }
  }
}


/// Gradient overlay
/// @author Przemek Trepka
/// @param {String} $image ['grain.jpg'] - image name if any
/// @param {Number} $alpha [.88] - custom image brand-color overlay intensity
/// @param {Bool} $local [true] - whether the image is an asset or an url
@mixin brand-gradient($image: null, $grain: null, $alpha: .88, $local: true, $color: $brand-color, $color2: $color) {

  $degree: 180deg; // set the gradient slant
  // $color-specs: rgba(#B066FE, .22) 22%,
  //               rgba($color, .0),
  //               rgba(#63E2FF, .22) 77%; // set the faint color highlights
  $color-specs: rgba($color, .64) 11%,
  rgba($color, .22),
                rgba($color2, .36) 88%; // set the faint color highlights

  $overlay: rgba($color, $alpha), rgba($color, $alpha); // set the brand overlay

  background-color: $color; // set fallback color
  @if ($local == true) {
    // part of assets
    @if ($image == null) {
      @if ($grain == null) {
        // default grain
        background: -webkit-linear-gradient($degree $color-specs), image('grain-bright.jpg'); // Safari 5.1+, Chrome
        background: unquote("linear-gradient(#{$degree}, #{$color-specs})"), image('grain-bright.jpg');
        background-size: auto, 320px;
      } @else {
        // custom grain
        background: -webkit-linear-gradient($degree $color-specs), image($grain); // Safari 5.1+, Chrome
        background: unquote("linear-gradient(#{$degree}, #{$color-specs})"), image($grain);
        background-size: auto, 320px;
      }
    } @else {
      // photo background
      background: -webkit-linear-gradient($degree $color-specs), -webkit-linear-gradient($overlay), image($image); // Safari 5.1+, Chrome
      background: unquote("linear-gradient(#{$degree}, #{$color-specs})"), unquote("linear-gradient(#{$overlay})"), image($image);
      background-size: auto, auto, cover;
      background-position: 50% 50%;
      background-repeat: no-repeat;
    }
  } @else {
    // must a url
    background: -webkit-linear-gradient($degree $color-specs), -webkit-linear-gradient($overlay), url($image); // Safari 5.1+, Chrome
    background: unquote("linear-gradient(#{$degree}, #{$color-specs})"), unquote("linear-gradient(#{$overlay})"), url($image);
    background-size: auto, auto, cover;
    background-position: 50% 50%;
    background-repeat: no-repeat;
  }
}
